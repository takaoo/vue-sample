{"version":3,"sources":["webpack:///./src/views/Matter.vue?2cee","webpack:///src/views/Matter.vue","webpack:///./src/views/Matter.vue?47a3","webpack:///./src/views/Matter.vue","webpack:///./node_modules/matter-js/build/matter.js"],"names":["_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","attrs","data","mounted","Engine","engine","create","width","window","innerWidth","height","innerHeight","render","Render","element","document","querySelector","options","pixelRatio","wireframes","console","log","boxA","Bodies","rectangle","boxB","World","add","world","mouse","mouseConstraint","run","group","i","cloth","bodies","isStatic","component","f","module","exports","r","e","n","t","o","c","require","u","a","Error","code","p","call","length","1","_dereq_","Body","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","id","nextId","type","label","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","slop","timeScale","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","defaultStrokeStyle","fillStyle","strokeStyle","min","max","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","2","Composite","Events","isModified","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","obj","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","get","toString","move","rebase","recursive","3","gravity","4","Contact","vertex","normalImpulse","tangentImpulse","index","5","Detector","SAT","Pair","collisions","broadphasePairs","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","previousCollision","pairId","pair","isActive","collision","collides","collided","filterA","filterB","6","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","keys","7","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","8","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove","9","Query","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","result","contains","10","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","11","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","prevIndex","nextIndex","12","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","inertiaTotal","resistanceTotal","zero","postSolveAll","13","MouseConstraint","Mouse","canvas","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","14","global","_nextId","_seed","_nowStartTime","Date","argsStart","deepClone","arguments","source","prop","constructor","Object","key","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isArray","prototype","isFunction","isPlainObject","isString","now","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","l","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","self","15","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","16","eventNames","callback","name","names","off","join","callbacks","newCallbacks","eventClone","17","Matter","Plugin","version","uses","used","use","before","after","18","19","absolute","mousedownPosition","mouseupPosition","wheelDelta","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","clientHeight","20","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","pattern","test","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","21","Runner","_requestAnimationFrame","_cancelAnimationFrame","_frameTimeout","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","setTimeout","clearTimeout","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","runner","deltaMin","deltaMax","time","tick","stop","start","22","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","23","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","roof","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","coincident_max_dist","pav","pbv","da","magnitudeSquared","db","isInternal","24","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","25","normalise","gradient","26","boundsA","boundsB","vector","shift","deltaX","deltaY","27","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","28","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","29","pathPattern","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","30","RenderPixi","31","background","wireframeBackground","hasBounds","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","space","debugTimestamp","text","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","32","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage"],"mappings":"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","file":"js/chunk-3bfe6956.bede9e65.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('div',{attrs:{\"id\":\"drawhere\"}})])}]\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"content\">\n    <div id=\"drawhere\"></div>\n  </div>\n</template>\n\n<script>\nimport Matter from \"matter-js\";\n\nexport default {\n  data: () => ({}),\n  mounted() {\n    // module aliases\n    var Engine = Matter.Engine,\n      Render = Matter.Render,\n      World = Matter.World,\n      Bodies = Matter.Bodies;\n\n    // create an engine\n    var engine = Engine.create();\n\n    var width = window.innerWidth * 0.9;\n    var height = window.innerHeight;\n    // create a renderer\n    var render = Render.create({\n      element: document.querySelector(\"#drawhere\"),\n      engine: engine,\n      options: {\n        width: width,\n        height: height,\n        pixelRatio: 2, //Pixel比; スマホ用に2にする\n        wireframes: false,\n        // background: '#fff'\n      },\n    });\n    console.log(render);\n    \n\n    // create two boxes and a ground\n    var boxA = Bodies.rectangle(width*0.1, 200, width * 0.15, width * 0.15, { frictionAir: 0.5 });\n    var boxB = Bodies.rectangle(width*0.15, 50, width * 0.15, width * 0.15, {\n      render: {\n        // fillStyle: \"#fff123\",\n      }\n    });\n\n    // walls\n    World.add(engine.world, [\n      // Bodies.rectangle(400, 0, 800, 5, { isStatic: true }),\n      Bodies.rectangle(width*0.5, 550, width*0.9, 50, { isStatic: true })\n      // Bodies.rectangle(800, 300, 50, 600, { isStatic: true }),\n      // Bodies.rectangle(0, 300, 50, 600, { isStatic: true })\n    ]);\n\n    World.add(engine.world, [boxA, boxB]);\n\n    // add mouse control\n    var mouse = Matter.Mouse.create(render.canvas),\n      mouseConstraint = Matter.MouseConstraint.create(engine, {\n        mouse: mouse,\n        constraint: {\n          stiffness: 0.2,\n          render: {\n            visible: true\n          }\n        }\n      });\n\n    World.add(engine.world, mouseConstraint);\n\n    // run the engine\n    Engine.run(engine);\n\n    // run the renderer\n    Render.run(render);\n\n    // add cloth bodies\n    var group = Matter.Body.nextGroup(true),\n      particleOptions = {\n        friction: 0.00001,\n        collisionFilter: { group: group },\n        render: { visible: false }\n      },\n      constraintOptions = { stiffness: 0.06 },\n      cloth = Matter.Composites.softBody(\n        width * 0.4,\n        height * 0.3,\n        20,\n        10,\n        10,\n        20,\n        false,\n        5,\n        particleOptions,\n        constraintOptions\n      );\n\n    for (var i = 0; i < 20; i++) {\n      cloth.bodies[i].isStatic = true;\n    }\n\n    World.add(engine.world, [\n      // cloth,\n      Bodies.circle(width * 0.6, height * 0.8, width * 0.1, { isStatic: true }),\n      // Matter.Composites.newtonsCradle(width * 0.6, height * 0.5, 6, 20, 200)\n      // Matter.Composites.pyramid(100, 258, 10, 10, 0, 0, function(x, y) {\n      //   return Bodies.rectangle(x, y, 20, 20);\n      // })   \n    ]);\n\n    // マウス押したら物体出現\n    Matter.Events.on(mouseConstraint,\"mousedown\",(e)=>{\n      // console.log(e,\"down\");\n      World.add(engine.world, [\n      Matter.Bodies.rectangle(e.mouse.absolute.x,e.mouse.absolute.y,20,20)\n    ]);\n      \n\n      \n    })\n  }\n};\n</script>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Matter.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Matter.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Matter.vue?vue&type=template&id=18c69d84&\"\nimport script from \"./Matter.vue?vue&type=script&lang=js&\"\nexport * from \"./Matter.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n"],"sourceRoot":""}